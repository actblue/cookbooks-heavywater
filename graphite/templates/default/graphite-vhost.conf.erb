NameVirtualHost *:80

WSGIImportScript <%= node[:graphite][:basedir] %>/conf/graphite.wsgi process-group=graphite application-group=%{GLOBAL}

<VirtualHost *:80>
        ServerName graphite
        DocumentRoot "<%= node[:graphite][:basedir] %>/webapp"
        ErrorLog <%= node[:graphite][:basedir] %>/storage/log/webapp/error.log
        CustomLog <%= node[:graphite][:basedir] %>/storage/log/webapp/access.log common

        # I've found that an equal number of processes & threads tends
        # to show the best performance for Graphite (ymmv).
        WSGIDaemonProcess graphite processes=5 threads=5 display-name='%{GROUP}' inactivity-timeout=120
        WSGIProcessGroup graphite
        WSGIApplicationGroup %{GLOBAL}

        # XXX You will need to create this file! There is a graphite.wsgi.example
        # file in this directory that you can safely use, just copy it to graphite.wgsi
        WSGIScriptAlias / <%= node[:graphite][:basedir] %>/conf/graphite.wsgi 

        Alias /content/ <%= node[:graphite][:basedir] %>/webapp/content/
        <Location "/content/">
                SetHandler None
        </Location>

        # XXX In order for the django admin site media to work you
        # must change @DJANGO_ROOT@ to be the path to your django
        # installation, which is probably something like:
        # /usr/lib/python2.6/site-packages/django
        Alias /media/ "@DJANGO_ROOT@/contrib/admin/media/"
        <Location "/media/">
                SetHandler None
        </Location>

        # The graphite.wsgi file has to be accessible by apache. It won't
        # be visible to clients because of the DocumentRoot though.
        <Directory <%= node[:graphite][:basedir] %>/conf/>
                Order deny,allow
                Allow from all
        </Directory>

	<Location />
		  AuthType Basic
		  AuthName "Graphite"
		  AuthUserFile "<%= ::File.join(node[:graphite][:basedir], 'conf', 'users.htpass') %>"
		  Require valid-user
		  Order allow,deny
<% node[:graphite][:graphite_web][:allowed_ips].sort.uniq.each do |IP| -%>
		  Allow from <%= IP %>
<% end -%>
		  Satisfy any
	</Location>


</VirtualHost>


